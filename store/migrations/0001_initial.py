# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand_Chains',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('brand_name', models.CharField(max_length=100, verbose_name='Brand Name')),
                ('brand_status', models.CharField(max_length=100, verbose_name='Status', choices=[('Active', 'Active'), ('InActive', 'InActive')])),
                ('brand_added_by', models.CharField(max_length=100, blank=True, verbose_name='Brand Added By', default='Admin')),
                ('brand_added_time', models.DateTimeField(auto_now_add=True, verbose_name='Brand Added Time')),
                ('brand_updated_by', models.CharField(max_length=100, blank=True, verbose_name='Store Updated By', default='Admin')),
                ('brand_updated_time', models.DateTimeField(auto_now=True, verbose_name='Store Update Time')),
            ],
            options={
                'verbose_name': 'Store Brand',
                'ordering': ['brand_name'],
                'verbose_name_plural': 'Store Brands',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Financial_Chains',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('financial_brand_name', models.CharField(max_length=100, verbose_name='Financial Brand Name')),
                ('financial_brand_status', models.CharField(max_length=100, verbose_name='Status', choices=[('Active', 'Active'), ('InActive', 'InActive')])),
                ('financial_brand_added_by', models.CharField(max_length=100, blank=True, verbose_name='Financial Brand Added By', default='Admin')),
                ('financial_brand_added_time', models.DateTimeField(auto_now_add=True, verbose_name='Financial Brand Added Time')),
                ('financial_brand_updated_by', models.CharField(max_length=100, blank=True, verbose_name='Financial Store Updated By', default='Admin')),
                ('financial_brand_updated_time', models.DateTimeField(auto_now=True, verbose_name='Financial Store Update Time')),
            ],
            options={
                'verbose_name': 'Store Financial Brand',
                'ordering': ['financial_brand_name'],
                'verbose_name_plural': 'Store Financial Brands',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('city', models.CharField(max_length=100, choices=[('Mumbai', 'Mumbai'), ('Delhi', 'Delhi'), ('Gurgaon', 'Gurgaon'), ('Noida', 'Noida')])),
                ('locality', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Locality',
                'ordering': ['city', 'locality'],
                'verbose_name_plural': 'Localities',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Payment_Types',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('payment_type_name', models.CharField(max_length=100, verbose_name='Payment Type')),
                ('payment_type_status', models.CharField(max_length=100, verbose_name='Status', choices=[('Active', 'Active'), ('InActive', 'InActive')])),
                ('payment_type_added_by', models.CharField(max_length=100, blank=True, verbose_name='Payment Type Added By', default='Admin')),
                ('payment_type_added_time', models.DateTimeField(auto_now_add=True, verbose_name='Payment Type Added Time')),
                ('payment_type_updated_by', models.CharField(max_length=100, blank=True, verbose_name='Payment Type Updated By', default='Admin')),
                ('payment_type_updated_time', models.DateTimeField(auto_now=True, verbose_name='Payment Type Update Time')),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('store_name', models.CharField(max_length=100, help_text='Enter Store Name', verbose_name='Store Name')),
                ('store_address', models.CharField(max_length=200, verbose_name='Store Address')),
                ('store_city', models.CharField(max_length=100, verbose_name='Store City', choices=[('Mumbai', 'Mumbai'), ('Delhi', 'Delhi'), ('Gurgaon', 'Gurgaon'), ('Noida', 'Noida')], default='Mumbai')),
                ('store_country', models.CharField(max_length=100, verbose_name='Store Country', choices=[('India', 'India')], default='India')),
                ('store_pincode', models.CharField(max_length=10, verbose_name='Store PINCODE', default=201301)),
                ('store_status', models.CharField(max_length=100, verbose_name='Status', choices=[('Active', 'Active'), ('InActive', 'InActive')], default='Active')),
                ('store_type', models.CharField(max_length=50, verbose_name='Store Type', choices=[('Fruits & Vegetables', 'Fruits & Vegetables'), ('Grocery', 'Grocery'), ('Bakery', 'Bakery'), ('Meat', 'Meat'), ('Flowers', 'Flowers')], default='Grocery')),
                ('store_slug', models.SlugField(verbose_name='Store Slug', unique=True)),
                ('store_phone_number', models.CharField(max_length=20, blank=True, verbose_name='Store Phone Number', null=True)),
                ('store_order_number', models.CharField(max_length=20, blank=True, verbose_name='Store Order Number', null=True)),
                ('store_manager_number', models.CharField(max_length=20, blank=True, verbose_name='Store Manager Number ', null=True)),
                ('store_owner_number', models.CharField(max_length=20, blank=True, verbose_name='Store Owner Number', null=True)),
                ('store_owner_email', models.EmailField(max_length=75, blank=True, verbose_name='Store Owner Email', null=True)),
                ('store_latitude', models.DecimalField(decimal_places=3, verbose_name='Store Latitude', blank=True, null=True, max_digits=8)),
                ('store_longitude', models.DecimalField(decimal_places=3, verbose_name='Store Longitude', blank=True, null=True, max_digits=8)),
                ('store_open_monday', models.TimeField(verbose_name='Store Open Time Monday')),
                ('store_close_monday', models.TimeField(verbose_name='Store Open Time Monday')),
                ('store_open_tuesday', models.TimeField(verbose_name='Store Open Time Tuesday')),
                ('store_close_tuesday', models.TimeField(verbose_name='Store Open Time Tuesday')),
                ('store_open_wednesday', models.TimeField(verbose_name='Store Open Time Wednesday')),
                ('store_close_wednesday', models.TimeField(verbose_name='Store Open Time Wednesday')),
                ('store_open_thursday', models.TimeField(verbose_name='Store Open Time Thursday')),
                ('store_close_thursday', models.TimeField(verbose_name='Store Open Time Thursday')),
                ('store_open_friday', models.TimeField(verbose_name='Store Open Time Friday')),
                ('store_close_friday', models.TimeField(verbose_name='Store Open Time Friday')),
                ('store_open_saturday', models.TimeField(verbose_name='Store Open Time Saturday')),
                ('store_close_saturday', models.TimeField(verbose_name='Store Open Time Saturday')),
                ('store_open_sunday', models.TimeField(verbose_name='Store Open Time Sunday')),
                ('store_close_sunday', models.TimeField(verbose_name='Store Open Time Sunday')),
                ('store_delivery_start_monday', models.TimeField(verbose_name='Store Delivery Start Time Monday')),
                ('store_delivery_close_monday', models.TimeField(verbose_name='Store Delivery Close Time Monday')),
                ('store_delivery_start_tuesday', models.TimeField(verbose_name='Store Delivery Start Time Tuesday')),
                ('store_delivery_close_tuesday', models.TimeField(verbose_name='Store Delivery Close Time Tuesday')),
                ('store_delivery_start_wednesday', models.TimeField(verbose_name='Store Delivery Start Time Wednesday')),
                ('store_delivery_close_wednesday', models.TimeField(verbose_name='Store Delivery Close Time Wednesday')),
                ('store_delivery_start_thursday', models.TimeField(verbose_name='Store Delivery Start Time Thursday')),
                ('store_delivery_close_thursday', models.TimeField(verbose_name='Store Delivery Close Time Thursday')),
                ('store_delivery_start_friday', models.TimeField(verbose_name='Store Delivery Start Time Friday')),
                ('store_delivery_close_friday', models.TimeField(verbose_name='Store Delivery Close Time Friday')),
                ('store_delivery_start_saturday', models.TimeField(verbose_name='Store Delivery Start Time Saturday')),
                ('store_delivery_close_saturday', models.TimeField(verbose_name='Store Delivery Close Time Saturday')),
                ('store_delivery_start_sunday', models.TimeField(verbose_name='Store Delivery Start Time Sunday')),
                ('store_delivery_close_sunday', models.TimeField(verbose_name='Store Delivery Close Time Sunday')),
                ('store_sales_rep', models.CharField(max_length=100, blank=True, verbose_name='Sales Representative', null=True)),
                ('store_account_manager', models.CharField(max_length=100, blank=True, verbose_name='Account Manager', null=True)),
                ('store_delivery_area_primary', models.PositiveSmallIntegerField(verbose_name='Primary Delivery Radius')),
                ('store_min_order_primary', models.PositiveSmallIntegerField(verbose_name='Minimum Order Primary Radius')),
                ('store_delivery_area_secondary', models.PositiveSmallIntegerField(verbose_name='Secondary Delivery Radius')),
                ('store_min_order_secondary', models.PositiveSmallIntegerField(verbose_name='Minimum Order Secondary Radius')),
                ('store_payment_cycle', models.PositiveSmallIntegerField(verbose_name='Payment Cycle', blank=True, null=True)),
                ('store_bank_account', models.CharField(max_length=100, blank=True, verbose_name='Bank Account', null=True)),
                ('store_display_order', models.SmallIntegerField(verbose_name='Display Order', help_text='Please give a order number. Stores displayed as per this sorting ')),
                ('store_added_by', models.CharField(max_length=100, blank=True, verbose_name='Store Added By', default='Admin')),
                ('store_added_time', models.DateTimeField(auto_now_add=True, verbose_name='Store Added Time')),
                ('store_updated_by', models.CharField(max_length=100, blank=True, verbose_name='Store Updated By', default='Admin')),
                ('store_updated_time', models.DateTimeField(auto_now=True, verbose_name='Store Update Time')),
                ('store_associated_brand_chain', models.ForeignKey(to='store.Brand_Chains', verbose_name='Associated Brand', blank=True, null=True)),
                ('store_associated_financial_chain', models.ForeignKey(to='store.Financial_Chains', verbose_name='Associated Brand', blank=True, null=True)),
                ('store_locality', models.ForeignKey(to='store.Locality', verbose_name='Store Locality')),
                ('store_payment_methods', models.ManyToManyField(to='store.Payment_Types', verbose_name='Payment Types', null=True)),
            ],
            options={
                'verbose_name': 'Store',
                'verbose_name_plural': 'Stores',
                'ordering': ['store_locality'],
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='store',
            unique_together=set([('store_name', 'store_locality', 'store_city')]),
        ),
        migrations.AlterIndexTogether(
            name='store',
            index_together=set([('store_locality', 'store_city')]),
        ),
    ]
